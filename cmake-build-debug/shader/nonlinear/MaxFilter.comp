#version 430
layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;



// image dimensions of input and output images
struct ImageDimensions
{
    int width;
    int height;
    int channelNumber;
    int isInputImage;
};

// image dimensions
layout(std430, binding = 0) buffer ImageDimensionsBuffer { ImageDimensions imageDimensions[]; };

// images
layout(std430, binding = 1) buffer InputImage   { float inputImage[];   };
layout(std430, binding = 2) buffer OutputImage  { float outputImage[];  };

// number of pixels of the first input image
uniform int pixelNumber;

// filter specific variables
uniform int filterRadius;



int getIndex(int imageIdx, int currentIdx, int offsetX, int offsetY)
{
    int width = imageDimensions[imageIdx].width;
    int height = imageDimensions[imageIdx].height;
    int currentX = int(mod(currentIdx, width));
    int currentY = int(floor(float(currentIdx) / width));
    int newX = currentX+offsetX;
    int newY = currentY+offsetY;
    if(newX < 0) newX = -(1+newX);
    if(newY < 0) newY = -(1+newY);
    if(newX >= width) newX = 2*width-1 - newX;
    if(newY >= height) newY = 2*height-1 - newY;
    return newX + newY*width;
}

int getPixelChannel(int imageIdx, int currentIdx, int offsetX, int offsetY, int channel)
{
    int channelNumber = imageDimensions[imageIdx].channelNumber;
    return getIndex(imageIdx, currentIdx,offsetX,offsetY)*channelNumber+channel;
}

void main()
{
    // get the index of the current thread
    int threadIdx = int(gl_GlobalInvocationID.x);
    if (threadIdx >= pixelNumber) return;

    // get the image dimensions
    int width = imageDimensions[0].width;
    int height = imageDimensions[0].height;
    int channelNumber = imageDimensions[0].channelNumber;

    int filterSize = 2*filterRadius+1;

    for (int c = 0; c < channelNumber; c++)
    {
        float max = 0.0;
        for (int y = -filterRadius; y <= filterRadius; y++)
        {
            for (int x = -filterRadius; x <= filterRadius; x++)
            {
                max = max(inputImage[getPixelChannel(0,threadIdx,x,y,c)], max);
            }
        }
        outputImage[getPixelChannel(1,threadIdx,0,0,c)] = max;
    }
}
